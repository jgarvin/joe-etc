#!/usr/bin/env zsh

typeset -ga chpwd_functions
typeset -ga preexec_functions
typeset -ga precmd_functions

# Make copy of ZSH_OLD_ENV and use it,
# so that we don't interfer with parent shells.
if [ -n "$ZSH_OLD_ENV" ]; then
		newold=$(mktemp)
		cp "$ZSH_OLD_ENV" "$newold"
		export ZSH_OLD_ENV="$newold"
fi

check_env_files()
{
		# TODO: Make sure file is owned and only writable by me.
		# TODO: Let earlier env variable settings affect later ones
		# TODO: Support not yet dereferenced vars
		# TODO: Blacklist of folders for circumventing checking

		# Find environment specific settings
		local custom_env=$(find_up -name 'zsh-custom-env')
		local abspath_env=$(readlink -f "$custom_env")
		local root=$(dirname "$abspath_env")
		local relative_root=$(dirname "$custom_env")

		if [ ! "$custom_env" = "" ] && [ -d "$root"/bin ]; then
				# Check for binaries within path, except in the bin folder itself,
				# and ignore hidden folders (since git samples and the like are in
				# there).

				# Trigger a full rescan when the bin directory changes, might
				# have wiped all the symlinks so they'd get regen'd.
				full_rescan=false
        binaries_changed=false
				if [ ! -f "$root/bin/.last_scan_marker" ] || \
						[ "$root/bin" -nt "$root/bin/.last_scan_marker" ]; then
								touch "$root/bin/.last_scan_marker"
								full_rescan=true
				fi
				
				for dir in $(find "$root" -mindepth 1 -type d -not -path "$root/bin" \( ! -regex '.*/\..*' \)); do
						if $full_rescan || [ ! -f "$dir/.last_scan_marker" ] || \
								[ "$dir" -nt "$dir/.last_scan_marker" ]; then
								touch "$dir/.last_scan_marker"
								
								for i in $(find "$dir" -maxdepth 1 -type f -perm -o+x \( ! -regex '.*/\..*' \)); do
										if file "$i" | grep executable &> /dev/null; then
												if [ ! -f "$root/bin/$(basename $i)" ]; then
                            # Prevent overriding existing apps and shell builtins
                            if ! which "$(basename $i)" &> /dev/null; then
														    echo "Adding $(basename $i) to sandbox path..."
														    ln -sf $(relpath "$root/bin" "$i")/$(basename "$i") "$root/bin"
                                binaries_changed=true
                            fi
												fi
										fi
								done
						fi
				done
				
				# Check to make sure binaries in path are still valid
				for i in $(find "$root"/bin -type l); do
						# Looks paradoxical, but if $i is a present symlink to
						# an invalid file, then the conditonal is satisifed.
						if [ ! -f "$i" ]; then
								echo "Removing $(basename $i) from sandbox path..."
								rm -f "$i"
                binaries_changed=true
						fi
				done

        if $binaries_changed; then
            rehash
        fi
		fi

		# We're already in this environment
		if [ "$ZSH_CUSTOM_ENV" = "$abspath_env" ]; then
				if [ "$ZSH_ENV_MTIME" = "$(stat -c %Y "$abspath_env" 2> /dev/null)" ]; then
						# And it hasn't changed, so just return.
						return
				fi
		fi

		if [ -n "$ZSH_OLD_ENV" ]; then
				echo >&2 "Restoring old environment"
				saveIFS=$IFS; IFS=$'\n'; entries=($(cat "$ZSH_OLD_ENV")); IFS=$saveIFS
				for i in $entries; do
						local varname=$(echo $i | cut -d'=' -f 1)
						local value=$(echo $i | cut -d'=' -f 2-)
						echo >&2 "Restoring $varname=$value"
						export $varname="$value"
				done
				rm $ZSH_OLD_ENV
				export ZSH_CUSTOM_ENV=""
				export ZSH_OLD_ENV=""
				export ZSH_ENV_MTIME=""
		fi

		if [ -n "$abspath_env" ]; then
				echo >&2 "Switching environment to $abspath_env"
				saveIFS=$IFS; IFS=$'\n'; entries=($(cat "$abspath_env")); IFS=$saveIFS
				for i in $entries; do
						local varname="$(echo $i | cut -d'=' -f 1)"
						# TODO: Should only sed out surrounding unescaped quotes
						local value="$(echo $i | cut -d'=' -f 2- | sed 's/\"//g')"
						echo >&2 "Setting $varname=$value"

						if [ -z "$ZSH_OLD_ENV" ]; then
								ZSH_OLD_ENV=$(mktemp)
								export ZSH_OLD_ENV
						fi

						local old_val=$(env | grep -E "^$varname=")
						if [ -z "$old_val" ]; then
								echo "$varname=" >> $ZSH_OLD_ENV
						else
								echo "$old_val" >> $ZSH_OLD_ENV
						fi

						eval "export $i"
				done
				export ZSH_CUSTOM_ENV="$abspath_env"
				export ZSH_ENV_MTIME="$(stat -c %Y "$abspath_env")"

				holding_dir=$(dirname "$ZSH_CUSTOM_ENV")
				if ! grep "$holding_dir" $ZDOTDIR/.zsh-custom-locs &> /dev/null; then
						echo "$holding_dir" >> $ZDOTDIR/.zsh-custom-locs
				fi
		fi
}

# Purge old locations
if [ -f $ZDOTDIR/.zsh-custom-locs ]; then
		local changed=false
		#local tokeep
		typeset -a tokeep
		cat $ZDOTDIR/.zsh-custom-locs | while read i; do
				if [ -f "$i/zsh-custom-env" ]; then
						tokeep+="$i"
				else
						echo >&2 "Purging $i from $ZDOTDIR/.zsh-custom-locs"
						changed=true
				fi
		done

		if $changed; then
				local newlocs=$(mktemp)
				for i in {1..${#tokeep}}; do
						echo $tokeep[$i] >> "$newlocs"
				done
				mv -f "$newlocs" $ZDOTDIR/.zsh-custom-locs
		fi
fi

go() {
		local target_sbox="$1"

		if [ -z "$target_sbox" ]; then
				local root=$(find_up -name "zsh-custom-env")
				if [ -n "$root" ]; then
						cd $(dirname "$root")
				else
						echo >&2 "Need sandbox name."
						return 1
				fi
		fi

		local best_loose_match=""

		cat "$ZDOTDIR/.zsh-custom-locs" | while read i; do
				if [ "$(basename $i)" = "$target_sbox" ]; then
						cd "$i"
						return 0
				fi

				if [[ "$(basename $i)" -regex-match ".*$target_sbox.*" ]]; then
						if [ -z $best_loose_match ]; then
								best_loose_match="$i"
						fi
				fi
		done

		if [ -n "$best_loose_match" ]; then
				cd "$best_loose_match"
				return 0
		fi

		return 1
}

# chpwd_functions+='check_env_files'
# preexec_functions+='check_env_files'
# precmd_functions+='check_env_files'
