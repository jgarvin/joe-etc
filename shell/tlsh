#!/bin/env zsh

# Yes, this is terrible
xhost + > /dev/null 2>&1

# Need to run as ksh to work correctly
if [[ `uname -s` = "SunOS" ]]; then
    if [[ -a $HOME/.profile ]]; then
	SHELL=/bin/ksh source $HOME/.profile
    fi

    # Use terminfo from the last century
    if [[ -d "/opt/tradelink/share/terminfo" ]]; then
	    export TERMINFO=/opt/tradelink/share/terminfo
    else
	    if [[ -d "/opt/app/nonc++/ncurses-5.7/share/terminfo" ]]; then
		    export TERMINFO=/opt/app/nonc++/ncurses-5.7/share/terminfo
	    else
		    if [[ -d "/export/home/joeg/ncurses-install/share/terminfo" ]]; then
			    export TERMINFO=/export/home/joeg/ncurses-install/share/terminfo
		    fi
	    fi
    fi

	# Without this I don't get psrinfo
	export PATH=$PATH:/usr/sbin
fi

# Try to use .zhistory on local box before resorting to using the network
export HISTFILE=/export/home/$LOGNAME/.zhistory

if which servicesgen &> /dev/null; then
    if [[ -a $HOME/services.in ]]; then
        $ZDOTDIR/etc/tradelink/bin/make_services > ~/.make_services_log
    fi

    if [[ -a $HOME/.services ]]; then
        export DS_SERVICES=$HOME/.services
    fi
fi

export DS_DOMAIN="test"

hostname=$(hostname)

if [[ -d /export/home ]]; then
    if [[ ! -a /export/home/$LOGNAME ]]; then
	    echo "Creating /export/home/$LOGNAME"
	    sudo mkdir /export/home/$LOGNAME
	    sudo chgrp develop /export/home/$LOGNAME
	    sudo chown $LOGNAME /export/home/$LOGNAME
	    cd /export/home/$LOGNAME
    fi
fi

if [[ "$PWD" = "/home/titan/$LOGNAME" ]]; then
    if [[ -a /export/home/$LOGNAME ]]; then
	    cd /export/home/$LOGNAME
    fi
fi

alias cdl=/export/home/$LOGNAME

# 'ls' output is easier to read when colored
if which gls &> /dev/null # Use GNU ls if available
then
	alias ls='gls --color=auto'
else
	alias ls='ls --color=auto'
fi

if which gfind &> /dev/null # Use GNU find if available
then
	alias find='gfind'
fi

if which gmake &> /dev/null # Use GNU make if available
then
	alias make='gmake'
fi

if which ggrep &> /dev/null # Use GNU grep if available
then
	alias grep='ggrep --color=auto'
else
    if grep --version &> /dev/null | grep GNU &> /dev/null
    then
        alias grep='grep --color=auto'
    fi
fi

if which gawk &> /dev/null # Use GNU awk if available
then
	alias awk='gawk'
fi

if which gsed &> /dev/null # Use GNU sed if available
then
	alias sed='gsed'
fi

if which gsleep &> /dev/null # Use GNU sleep if available
then
	alias sleep='gsleep'
fi

if which gtar &> /dev/null # Use GNU tar if available
then
	alias tar='gtar'
fi

if which gcp &> /dev/null # Use GNU cp if available
then
	alias cp='gcp'
fi

if which gstrings &> /dev/null # Use GNU strings if available
then
	alias strings='gstrings'
fi

if which ghead &> /dev/null # Use GNU head if available
then
	alias head='ghead'
fi

# Try to use .zhistory on local box before resorting to using the network
if [[ `basename $SHELL` = "zsh" ]]; then
	zstyle ':completion:*' cache-path /export/home/joeg/.zshcache
fi

# By default SQL is pants on head stupid about keyboard shortcuts
# and arrow keys. rlwrap fixes that.
if which rlwrap &> /dev/null
then
    alias sql='rlwrap sql'
	alias isql='rlwrap isql'
else
	echo "rlwrap not available, so you're stuck with bare sql." >&2
fi

testinstr()
{
	echo "ICACHE:"
	DS_DOMAIN=wslave2a ./mfquery $1 $2 $3 $4 $5 $6 ASK_PRICE BID_PRICE CLOSE_DATE CLOSE_PRICE LAST_PRICE LAST_TIME PREV_DAY_CLOSE_PRICE PREV_DAY_CLOSE_DATE --marketFeedMethod=ICACHE --quit_on_snapshot
	echo "WOMBAT:"
	DS_DOMAIN=wslave2a ./mfquery $1 $2 $3 $4 $5 $6 ASK_PRICE BID_PRICE CLOSE_DATE CLOSE_PRICE LAST_PRICE LAST_TIME PREV_DAY_CLOSE_PRICE PREV_DAY_CLOSE_DATE --marketFeedMethod=WOMBAT --quit_on_snapshot 2> /dev/null
}

# Use newer sybase
export PATH=/opt/app/sybase15/OCS-15_0/bin:$PATH

# Use newer emacs
export PATH=/opt/app/emacs-23.1/bin:$PATH

# less_than_4_gigs()
# {
#     if [[ $(uname -s) = "Linux" ]]; then
#         [[ $(free -m | grep Mem | awk '{ print $2 }') < 4032 ]]
#     fi
#     if [[ $(uname -s) = "SunOS" ]]; then
#         [[ "$(prtconf | grep Mem | awk '{ print $3 }')" < 4032 ]]
#     fi
# }

# icache_wombat eats all my memory when compiled with multiple CPUs
tlsh_file_name=$0
tlmake()
{
    disable -f tlmake
    if [[ `basename $PWD` = "icache_wombat" ]]; then
        echo "Running with 1 CPU. See $tlsh_file_name"
        MAKEFLAGS=-j1 tlmake $@
    else
        tlmake $@
    fi
    enable -f tlmake
}

tlversion()
{
    disable -f tlversion
    if [[ `basename $PWD` = "icache_wombat" ]]; then
        echo "Running with 1 CPU. See $tlsh_file_name"
        MAKEFLAGS=-j1 tlversion $@
    else
        tlversion $@
    fi
    enable -f tlversion
}

poor_man_dtrace()
{
    while true
    do
        pstack $1 | gc++filt | head -n ${2:-10}
        #pstack $1 | gc++filt
        sleep 2
        clear
    done
}

export CVSROOT=:pserver:$LOGNAME@cvs:/cvs

print_version_tmps() {
    for i in `search version.tmp`
    do
        echo `dirname $i`-`cat $i` | awk -F./ '{ print $2 }'
    done
}

dry_run_cmd() {
    if [[ -z "$RUN_FOR_REAL" ]]
    then
        echo $@
    else
        eval $@
    fi
}

version_swap() {
    start_folder=$PWD
    for i in `search version.tmp`
    do
        echo "Processing" `dirname $i`
        echo "Current folder:" $PWD
        dir=`dirname $i`
        version_cmd="cmp_versions $dir/version.in $i"
        version_change=`eval $version_cmd`
        dry_run_cmd cp $i $dir/.version.tmp.backup
        dry_run_cmd rm $i
        dry_run_cmd "cd $dir; tlversion $version_change; cd $OLDPWD"
        cd $start_folder
    done
}

launch_builder() {
    if [[ ! $hostname = "userver43" ]]; then
        ssh -t builder@userver43 ZDOTDIR=~joeg zsh
    else
        ZDOTDIR=~joeg zsh
    fi
}

launch_builder_sparc() {
    if [[ ! $hostname = "solsparc" ]]; then
        ssh -t builder@solsparc ZDOTDIR=~joeg zsh
    else
        ZDOTDIR=~joeg zsh
    fi
}

