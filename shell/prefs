#!/bin/sh

. `dirname $0`/util

# Load OS specific preferences
if [[ -a `dirname $0`/$(uname -s) ]]; then
    . `dirname $0`/$(uname -s)
else
    echo "No shell preferences found for this OS!" >&2
fi

export ANDROID_PATH=~/opt/android-sdk-linux_x86-1.6_r1;
if [[ -d $ANDROID_PATH ]]; then
        export PATH=$(path_prepend $ANDROID_PATH/tools)
fi

if [[ -d "$HOME/opt/bin" ]]; then
        export PATH=$(path_prepend "$HOME/opt/bin")
fi

if [[ -d "$HOME/opt/share/perl6/site/bin" ]]; then
    export PATH=$(path_prepend "$HOME/opt/share/perl6/site/bin")
fi

if [[ -d "$HOME/opt/lib" ]]; then
    export LD_LIBRARY_PATH=$(path_append "$HOME/opt/lib")
fi

if [ -d $HOME/opt/lib/python2.6/site-packages ]; then
    export PYTHONPATH=$HOME/opt/lib/python2.6/site-packages:$PYTHONPATH
fi

# Ack is a nice replacement for grep, just does the right thing
# Really should be able to add to the existing make type, but will make mk a separate
# type for now.
ack()
{
        ~/etc/bin/ack \
                --sort-files \
                --type-set incl=.incl \
                --type-add hh=.ipp "$@";
}

export BROWSER=$($ZDOTDIR/etc/utils/pick_best_browser)

# Newer versions of emacs will autoload emacs if ALTERNATE_EDITOR is empty.
export EDITOR="$ZDOTDIR/etc/bin/launch-emacs"

if which htop &> /dev/null; then
    alias top='htop'
fi

if grep --version 2> /dev/null | grep "Free Software" &> /dev/null
then
    alias grep='grep --color=auto'
fi

if ls --version 2> /dev/null | grep "Free Software" &> /dev/null
then
		if ls --version 2> /dev/null | grep "GNU" &> /dev/null; then
				alias ls='ls -F -h --color=auto --group-directories-first'
		else
				alias ls='ls -F -h --color=auto'
		fi
fi

# Obey my typos!
alias -r sl=ls

# Don't clear the screen when less exits
# also, searching should start from last line of screen
alias less='less -X -a -R'
# Make sure we do the same in the pager env var so it applies to git!
export PAGER="less -X -a -R"

alias ssh="${aliases[ssh]-ssh} -C -X"

# almost never use mv to overwrite
alias mv="mv -i"

find_biggest() {
		find ${1-.} -type f -exec du -k {} + | sort -k1n -k2 | tail -n 20
}

# 99% of the time I want truss to include child processes
file_name=$0

if which truss &> /dev/null; then
    truss()
    {
        echo "Running truss including children. See $file_name."
        disable -f truss
        truss -f "$@"
        enable -f truss
    }
fi

# Without this OO looks terrible under xmonad
OOO_FORCE_DESKTOP=gnome

# Add sensible bindings for ocaml
if which rlwrap &> /dev/null
then
        if which ocaml &> /dev/null
        then
                alias ocaml='rlwrap ocaml'
        else
                echo "rlwrap not available, so you're stuck with bare ocaml." >&2
        fi
fi

if [[ "$(basename $ZDOTDIR)" = "$LOGNAME" ]];
then
    # Although we haven't added $HOME/etc/bin to our path yet,
    # if we're a subshell we may inherit it. We want to remove
    # it temporarily because we're going to find the 'real'
    # locations of different utilities.
    PATH=$(echo $PATH | sed s,$HOME/etc/bin,,g | sed s,$HOME/etc/bin/$(uname -s),,g)

    # Protect against having '.' in $PATH.
    # zsh interprets '::' in $PATH to mean ':.:'
    # This can happen after removing paths above.
    PATH=$(echo $PATH | sed 's/::/:/g')

    if [[ ! -a $HOME/etc/real_locations/$(hostname) ]]; then
        mkdir -p $HOME/etc/real_locations/$(hostname)
    fi

    which gdb > $HOME/etc/real_locations/$(hostname)/gdb
    which svcadm > $HOME/etc/real_locations/$(hostname)/svcadm

    # OK, now put it back in.
    if [[ -d $ZDOTDIR/etc/bin ]]; then
            PATH=$(path_prepend $ZDOTDIR/etc/bin)
            os_bin="$ZDOTDIR/etc/bin/$(uname -s)"
            mkdir -p "$os_bin"
            PATH=$(path_prepend "$os_bin")
    fi
fi

sshmount() {
    remote_path="$ZDOTDIR/rmt/$1-root"

    # create mount point
    mkdir -p "$remote_path"

    # apparently these are best for performance
    sshfs_opts="-oreconnect,transform_symlinks,ssh_command=$ZDOTDIR/etc/bin/ssharcfour,workaround=rename"
    #sshfs_opts="-o ssh_command=$ZDOTDIR/etc/bin/ssharcfour"

    # Remount
    fusermount -u "$remote_path" &> /dev/null
    if ! sshfs "$sshfs_opts" "$LOGNAME"@"$1":/ "$remote_path"; then
        echo >&2 "sshfs failed!"
        return 1
    fi

    cd $ZDOTDIR/rmt
    ln -Tsf "$1-root/home/$LOGNAME" "$1"

    ssh-add &> /dev/null # idempotent, registers key

    # make sure ssh'ing to self is passwordless
    local_key_file="$ZDOTDIR/.ssh/authorized_keys"
    if ! grep "$(cat $ZDOTDIR/.ssh/id_rsa.pub)" $local_key_file  &> /dev/null; then
        cat $ZDOTDIR/.ssh/id_rsa.pub >> $local_key_file
    fi

    touch $ZDOTDIR/rmt/hostlist
    if ! grep "$1" $ZDOTDIR/rmt/hostlist &> /dev/null; then
        echo "$1" >> $ZDOTDIR/rmt/hostlist
    fi

    # now setup home folder :D
    $ZDOTDIR/etc/bin/sync-repos
}

if [ -f $ZDOTDIR/etc/jsh/init.zsh ]; then
    source $ZDOTDIR/etc/jsh/init.zsh
fi

if grep -o '^flags\b.*: .*\bht\b' /proc/cpuinfo | tail -1 &> /dev/null; then
    export MAKEFLAGS="-j$(grep 'processor' /proc/cpuinfo | sort -u | wc -l)"
else
    export MAKEFLAGS="-j$(grep 'processor' /proc/cpuinfo | sort -u | wc -l)"
fi

#export MAKEFLAGS="-j$(grep 'processor' /proc/cpuinfo | sort -u | wc -l)"
#export MAKEFLAGS="$MAKEFLAGS -l10"

export PATH

alias gdb='gdb --quiet'
alias -g L='| /usr/bin/less -X -a -R'
alias -r l='/usr/bin/less -X -a -R'
less() {
    echo "Use L or l!!!!" >&2
    return 1
}
