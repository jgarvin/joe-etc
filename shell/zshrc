#!/usr/bin/env zsh

typeset -ga chpwd_functions
typeset -ga preexec_functions
typeset -ga precmd_functions

if [[ "$ZDOTDIR" = "" ]]; then
    export ZDOTDIR=~
fi

if [[ "$(basename $ZDOTDIR)" = "$LOGNAME" ]];
then
    $HOME/etc/shell/setup_symlinks
		$HOME/etc/shell/setup_xmonad
fi

fpath=($ZDOTDIR/etc/shell/completion $fpath)

export SHELL=`which zsh`

export REPORTTIME=10

# Now deleting a word won't erase a whole path.
autoload -U select-word-style
select-word-style bash

# Prefer emacs bindings! I've found boxes where they default to vi bindings.
# Apparently the default changes based on your $EDITOR, but even if my EDITOR
# is set to emacs the london boxes default me to vi bindings without this.
bindkey -e

source $ZDOTDIR/etc/shell/prefs

# Apply zsh specific utils
source $ZDOTDIR/etc/shell/zsh_util

if [[ $(uname -s) = "Linux" ]]; then
	local curdir=$PWD
    cd ~/etc
    redo/redo all > ~/.redolog 2>&1
    cd "$curdir"
fi

# I want to see my core dumps, up to 4GB
ulimit -c 8000000
# "core.%e.%p.%u.%t"

echo "DATE=$(date) HOST=$(hostname) USER=$LOGNAME TERM=$TERM" >> ~/.shell_log

cdr()
{
    # Have to run with unbuffer to make sure that it stops as
    # soon as it gets the first result.
    cd $(unbuffer find . -name "*$1*" -type d | head -1)
}

# if [[ -a $HOME/etc/cron/$(hostname).cron ]]; then
#     crontab $HOME/etc/cron/$(hostname).cron
# fi

################################################################################
# History settings
################################################################################
# Timestamps for when commands occurred make diagnosing problems easier
setopt EXTENDED_HISTORY

# number of lines kept in history
export HISTSIZE=100000

# number of lines saved in the history after logout
export SAVEHIST=1000000

# append command to history file once executed
setopt inc_append_history

###############################################################################
# misc zsh settings
###############################################################################

setopt autopushd             # Push things onto the directory stack
setopt autocd                # cd to a dir when just its name is given
setopt chasedots             # Resolve symlinks before resolving parent dirs
setopt autolist              # Do a list on ambiguous completion
setopt automenu              # Do a menu after <Tab><Tab>
setopt autoparamslash        # Append a slash for directory completion
setopt completealiases       # Treat aliases as commands
setopt listpacked            # Use variable column widths
setopt globdots              # Assume leading . for hidden files
setopt COMPLETE_IN_WORD      # allow completion in the middle of a word
setopt extended_glob         # Lets you negate patterns, e.g. all non .c files: ^*.c

# system beep is irritating for tab completion
unsetopt beep

# Add mime support for opening files
autoload -U zsh-mime-setup
zsh-mime-setup


###############################################################################
# utilities
###############################################################################

# Give some convenient shortcuts for pushing and popping folder stack
alias -r b='pushd +1 > /dev/null'
alias -r f='pushd -0 > /dev/null'
alias -r recent='ls -l -r --sort=time'

# allow tab completion in the middle of a word
alias l.='ls -d .*'
alias -r up="cd .."
alias -r upup="cd ../.."
alias -r upupup="cd ../../.."
alias -r upupupup="cd ../../../.."
alias cl="clear;ls"

prepend-timestamp()
{
	awk '{ print strftime("%Y-%m-%d %H:%M:%S"), $0; }'
}

# Intuitively, searches current folder and subfolders
search () {
	find \( -type f -o -type d \) -iname \*$1\*
}

# bash function to decompress archives - http://www.shell-fu.org/lister.php?id=375
extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1        ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1       ;;
            *.rar)       unrar x $1     ;;
            *.gz)        gunzip $1     ;;
            *.tar)       tar xvf $1        ;;
            *.tbz2)      tar xvjf $1      ;;
            *.tgz)       tar xvzf $1       ;;
            *.zip)       unzip $1     ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1    ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

################################################################################
# Completion settings
################################################################################

autoload -Uz compinit && compinit

zstyle ':completion:*' completer \
    _expand \
    _complete \
    _match \
    _approximate \
    _prefix

# Cache completion results
zstyle ':completion:*' use-cache on

# Make lower-case input case insensitive
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# Better process completion
zstyle ':completion:*:processes' command 'ps -U $USERNAME -u $USERNAME -o pid,s,nice,stime,args'
zstyle ':completion:*:processes-names' command 'ps -U $USERNAME -u $USERNAME -o args'

# Ignore VCS directories when completing
zstyle ':completion:*:(all-|)files' ignored-patterns \
    '(|*/)CVS' \
    '(|*/).git' \
    '(|*/).svn'
zstyle ':completion:*:cd:*' ignored-patterns \
    '(|*/)#CVS' \
    '(|*/)#.git' \
    '(|*/)#.svn'

# Fix errors
zstyle ':completion:*:approximate:*' max-errors 2 numeric

# Ignore internal functions
zstyle ':completion:*:functions' ignored-patterns \
    '_*'

# Remove trailing slashes from directories
zstyle ':completion:*' squeeze-slashes true

# Attempt to complete many parts at once
zstyle ':completion:*' matcher-list '' 'r:|[._-]=** r:|=**' 'l:|=* r:|=*'

# Substitute things when tab completing
zstyle ':completion:*:expand:*' substitute true

# Insert as much as possible
zstyle ':completion:*:match:*' glob true
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:match:*' insert-unambiguous true

# Ignore where we are when completing directory names
zstyle ':completion:*' ignore-parents parent pwd directory

# Completion list settings
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' list-suffixes true
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s

# Separate groups
zstyle ':completion:*' group-name ''

# Highlight current choice
zstyle ':completion:*' menu select

# To help emacs tramp mode and global desktop,
# turn off the fancy stuff.
if [[ "$TERM" = "dumb" || "$TERM" = "" ]]
then
  unsetopt zle
  unsetopt prompt_cr
  unsetopt prompt_subst
  unfunction precmd
  unfunction preexec
  PS1='$ '
  PS2='$ '
  PROMPT='$ '
  RPROMPT='$ '
else
	# Creating new shells in GNU screen is jacked up on Solaris until you do this.
	if which stty &> /dev/null
	then
		stty sane

		# This disable Ctrl+s sending the STOP signal. This allows forward search in
		# zsh to work, and it prevents me from accidentally freezing all of my screen
		# instances (sending STOP to one sends it to all of them).
		stty -ixon
	fi

	# And this
	if which resize &> /dev/null
	then
		resize &> /dev/null
	fi

 	if [[ -s /etc/motd ]]; then
 		cat /etc/motd
 	fi
	. $ZDOTDIR/etc/shell/fancy-prompt
	setprompt
fi

HIST_DIR=$HOME
HIST_BACKUP_DIR=$HIST_DIR/.zhistory.backup
mkdir -p $HIST_DIR
mkdir -p $HIST_BACKUP_DIR
HIST_BACKUP_FILE="$HIST_BACKUP_DIR/zhistory.$(date "+%m%d%Y")"
export HISTFILE=$HIST_DIR/.zhistory
if [ ! -f "$HIST_BACKUP_FILE" ]; then
    # Delete files after a year.
    find "$HIST_BACKUP_DIR" -mtime +365 -type f -exec rm -rf {} \;

    # Make a backup
    cp -p "$HISTFILE" "$HIST_BACKUP_FILE"
fi

synergy_conf="$ZDOTDIR/etc/synergy/$(hostname).conf"
if [ -f "$synergy_conf" ] && \
    which synergys &> /dev/null && \
    ! tsk synergys &> /dev/null && \
    [ -n "$DISPLAY" ]
then
	    synergys -f --config $synergy_conf > $ZDOTDIR/.synergy_log 2>&1 &; disown
fi

if [ -d "$ZDOTDIR/remote" ]; then
	$ZDOTDIR/etc/bin/sync-repos
fi

# Make copy of ZSH_OLD_ENV and use it,
# so that we don't interfer with parent shells.
if [ -n "$ZSH_OLD_ENV" ]; then
		newold=$(mktemp)
		cp "$ZSH_OLD_ENV" "$newold"
		export ZSH_OLD_ENV="$newold"
fi

check_env_files()
{
		# TODO: Make sure file is owned and only writable by me.

		# Find environment specific settings
		local custom_env=$(find_up -name 'zsh-custom-env')

		abspath_env=$(readlink -f "$custom_env")

		# We're already in this environment
		if [ "$ZSH_CUSTOM_ENV" = "$abspath_env" ]; then
				if [ "$ZSH_ENV_MTIME" = "$(stat -c %Y "$abspath_env" 2> /dev/null)" ]; then
						# And it hasn't changed, so just return.
						return
				fi
		fi

		if [ -n "$ZSH_OLD_ENV" ]; then
				echo >&2 "Restoring old environment"
				saveIFS=$IFS; IFS=$'\n'; entries=($(cat "$ZSH_OLD_ENV")); IFS=$saveIFS
				for i in $entries; do
						local varname=$(echo $i | cut -d'=' -f 1)
						local value=$(echo $i | cut -d'=' -f 2-)
						echo >&2 "Restoring $varname=$value"
						export $varname="$value"
				done
				rm $ZSH_OLD_ENV
				export ZSH_CUSTOM_ENV=""
				export ZSH_OLD_ENV=""
				export ZSH_ENV_MTIME=""
		fi

		if [ -n "$abspath_env" ]; then
				echo >&2 "Switching environment to $abspath_env"
				saveIFS=$IFS; IFS=$'\n'; entries=($(cat "$abspath_env")); IFS=$saveIFS
				for i in $entries; do
						local varname="$(echo $i | cut -d'=' -f 1)"
						# TODO: Should only sed out surrounding unescaped quotes
						local value="$(echo $i | cut -d'=' -f 2- | sed 's/\"//g')"
						echo >&2 "Setting $varname=$value"

						if [ -z "$ZSH_OLD_ENV" ]; then
								ZSH_OLD_ENV=$(mktemp)
								export ZSH_OLD_ENV
						fi

						local old_val=$(env | grep $varname=)
						if [ -z "$old_val" ]; then
								echo "$varname=" >> $ZSH_OLD_ENV
						else
								echo "$old_val" >> $ZSH_OLD_ENV
						fi
						export $varname="$value"
				done
				export ZSH_CUSTOM_ENV="$abspath_env"
				export ZSH_ENV_MTIME="$(stat -c %Y "$abspath_env")"
		fi
}

chpwd_functions+='check_env_files'
preexec_functions+='check_env_files'
precmd_functions+='check_env_files'