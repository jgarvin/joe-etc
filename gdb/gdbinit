echo \nReading ~/.gdbinit...\n\n
set print asm-demangle on
set print pretty on
set print object on
# set print static-members on # makes printing objects too verbose!
set print static-members off
set print vtbl on
set print demangle on
set demangle-style gnu-v3
#set demangle-style none


# this helps emacs know where we are
set annotate 1

set history size 9999999
set history filename ~/.gdbhistory
set history save on

define gdbkill
kill
end

define gdbquit
quit
end

set script-extension soft

# to prevent other threads from being able to run
# when you are stepping
#set scheduler-locking on

# disable paging since eshell handles for us
set height 0

# annoying to remember, not needed on newer gdb versions
#alias -a exit = quit

source ~/etc/gdb/nopify.py

# lets us download debug symbols on the fly
set debuginfod enabled on

define print_environ
    set $i = 0
    while (environ[$i] != 0x0)
        printf "environ[%i]: \e[;94m%p\e[m: \"%s\"\n", $i, environ[$i], environ[$i++]
    end
end

##################################################################
# Code to dump where crash occurs and register values whenever
# execution stops taken from https://aengelke.net/.gdbinit
set output-radix 16

python

try:
    gdb.execute('set disassembly-flavor intel')
except Exception:
    # On non-x86 architectures, this doesn't work.
    pass

archs = [
    {
        "name": "i386:x86-64", "long": True,
        "regs": "rdi rsi rdx rcx rax rbx rbp rsp".split() + ["r"+str(i) for i in range(8, 16)],
    }, {
        "name": "i386",
        "regs": "edi esi edx ecx eax ebx ebp esp".split(),
    }, {
        "name": "arm",
        "regs": ["r"+str(i) for i in range(11)] + "fp ip sp lr pc".split(),
    }, {
        "name": "aarch64", "long": True,
        "regs": ["x"+str(i) for i in range(31)] + ["sp"],
    }
]
regsFmt = {}
isLong = {arch["name"]: "long" in arch for arch in archs}
for arch in archs:
    fmt = ["{:>3}: %{}x".format(r, "16l" if "long" in arch else "8") for r in arch["regs"]]
    fmt = "".join([" ".join(fmt[i:i+4]) + "\\n" for i in range(0, len(fmt), 4)])
    regsFmt[arch["name"]] = 'printf "{0}\\n", {1}'.format(fmt, ",".join(["$"+r for r in arch["regs"]]))


def py_stop_hook():
    try:
        arch = gdb.selected_frame().architecture().name()
        if arch not in isLong: return

        gdb.write('\n\033[92m')
        try:
            gdb.execute('x/5i $pc')
        except Exception:
            gdb.execute('printf "Could not parse instructions at %#lx", $pc\n')
        gdb.write('\033[0m\n')

        gdb.execute(regsFmt[arch])

        try:
            if isLong[arch]:
                stackFormat = 'printf "\033[2m%#lx:\033[0m %#018lx %#018lx %#018lx %#018lx\\n", $sp+8*{0}, *((long*)$sp + {0}), *((long*)$sp + {1}), *((long*)$sp + {2}), *((long*)$sp + {3})'
            else:
                stackFormat = 'printf "\033[2m%#x:\033[0m %#010x %#010x %#010x %#010x\\n", $sp+4*{0}, *((int*)$sp + {0}), *((int*)$sp + {1}), *((int*)$sp + {2}), *((int*)$sp + {3})'
            for i in range(4):
                gdb.execute(stackFormat.format(i*4, i*4+1, i*4+2, i*4+3))
        except Exception:
            gdb.execute('printf "Could not read stack at %#lx", $sp\n')
            pass
        gdb.write('\033[0m\n')
    except Exception:
        pass
end

define hook-stop
    python py_stop_hook()
end
##################################################################