(require 'cl) ;; remove-if-not

(defun md-insert-belt-text (text color)
  (put-text-property 0 (length text) 'face `(:underline t :foreground ,color) text)
  (put-text-property 0 (length text) 'font-lock-face `(:underline t :foreground ,color) text)
  (insert text))

(defun md-refresh-belt (window)
  (save-window-excursion
    (select-window window)
    (let ((inhibit-read-only t)
          (text "hello world")
          (color (window-parameter window (quote md-belt-color))))
      (erase-buffer)
      (md-insert-belt-text (concat text (make-string (- (window-total-width window) (length text) 2) ?-)) color)
      (goto-char (point-max)))))

(defun md-create-belt-window (frame belt-type color)
  (let ((belt-name (format "*%S-%S*" belt-type (frame-parameter frame 'md-belt-id))))
    (unless (remove-if-not (lambda (w) (string= (buffer-name (window-buffer w)) belt-name)) (window-list frame))
      (split-window (selected-window) 1 'above)
      (switch-to-buffer (get-buffer-create belt-name))
      (let ((new-window (get-buffer-window)))
        (set-window-dedicated-p new-window t)
        (set-window-parameter new-window 'no-other-window t)
        (set-window-parameter new-window 'md-is-belt-window t)
        (set-window-parameter new-window 'md-belt-type belt-type)
        (set-window-parameter new-window 'md-belt-color color)
        (read-only-mode t)
        (md-refresh-belt new-window)
        (other-window 1)))))

(defun md-frame-setup (frame)
  (unless (frame-parameter frame 'md-belt-id)
    (set-frame-parameter frame 'md-belt-id (gensym)))
  (md-create-belt-window frame 'frequent "red")
  (md-create-belt-window frame 'recent "yellow")
  (md-create-belt-window frame 'nearest "green")
  (dolist (window (window-list frame))
    (when (window-parameter window 'md-is-belt-window)
      (md-refresh-belt window))))

(defvar md-belt-item-max 10)
(defvar-local md-nearest-symbols nil)
(defvar-local md-last-point nil)

(defun md-get-next-symbol (dir)
  (let ((sym-start)
        (end (if dir (point-max) (point-min)))
        (search-function (if dir 're-search-forward 're-search-backward))
        (open-regex (if dir "\\_<" "\\_>"))
        (close-regex (if dir "\\_>" "\\_<")))
    (funcall search-function open-regex end)
    (setq sym-start (point))
    (funcall search-function close-regex end)
    (cons sym-start (point))))
    
(defun md-get-nearest-symbols ()
  (save-excursion
    (let ((symbol-list)
          (reverse-point (point))
          (forward-point (point))
          (next-symbol)
          (previous-symbol))
      (while (and (< (length symbol-list) md-belt-item-max)
                  (or (> reverse-point (point-min))
                      (< forward-point (point-max))))
        (goto-char forward-point)
        (setq next-symbol (md-get-next-symbol t))
        (goto-char reverse-point)
        (setq previous-symbol (md-get-next-symbol nil))
        (let* ((next-start (car next-symbol))
               (next-end (cdr next-symbol))
               (previous-start (car previous-symbol))
               (previous-end (cdr previous-symbol))
               (next-symbol-str (buffer-substring-no-properties next-start next-end))
               (previous-symbol-str (buffer-substring-no-properties previous-start previous-end)))
          (setq forward-point next-end)
          (setq reverse-point previous-end)
          (message "%s %s" next-symbol-str previous-symbol-str)
          (setq symbol-list (nconc symbol-list (list (unless (md-filter-symbol next-symbol-str next-start next-end) next-symbol-str)
                                                     (unless (md-filter-symbol previous-symbol-str previous-start previous-end) previous-symbol-str))))
          (setq symbol-list (delete-if-not 'identity symbol-list))
          (delete-dups symbol-list)))
      symbol-list)))

;; TODO: buffer could change without moving point, want to go off on
;; changes *and* point motion
(defun md-update-nearest-symbols ()
  (when (and (not (= (point) md-last-point))
             (not (window-parameter (get-buffer-window) 'md-is-belt-window)))
    (setq md-nearest-symbols (md-get-nearest-symbols))
    (setq md-last-point (point))))

;;(md-get-nearest-symbols)

(defun md-window-configuration-hook ()
  (dolist (frame (frame-list))
    (md-frame-setup frame)))
;;(window-parameter (selected-window) 'md-is-belt-window)



;;(md-frame-setup (selected-frame))

;; (frame-list)
;; (md-create-belt-window (selected-frame) "*frequent-belt*" "red")
;; (md-create-belt-window (selected-frame) "*recent-belt*" "yellow")
;; (md-create-belt-window (selected-frame) "*nearest-belt*" "green")

;;(md-delete-other-windows t)
;; (insert (format "%S"(symbol-function 'md-delete-other-windows)))

(defun md-delete-other-windows (arg)
  "Delete other windows as long as they're not dedicated, unless a prefix is provided."
  (interactive "P")
  (dolist (window (window-list))
    (when (not (eq window (selected-window)))
      (when (or arg (not (window-parameter window (quote md-is-belt-window))))
        (delete-window window)))))

(global-set-key (kbd "C-x 1") 'md-delete-other-windows)
  
;;(add-hook 'window-configuration-change-hook 'md-window-configuration-hook)
;;(remove-hook 'window-configuration-change-hook 'md-window-configuration-hook)
;;(add-hook 'after-make-frame-functions 'md-window-configuration-hook)
;;(remove-hook 'after-make-frame-functions 'md-window-configuration-hook)
