(md-make-snippets
 '(derived-mode-p 'racket-mode 'racket-repl-mode)
 '(
   ("lang racket" "#lang racket")
   ("lang typed racket" "#lang typed/racket")
   ("struct" "(struct $1 ($2))")
   ("member" "[$1 : $2]")
   ("dots" "(: $1 $2)")
   ("function type" "(-> $2)")
   ("arg" "$1 $2")
   ("define" "(define ($1)\n    $2)")
   ("square root" "(sqrt $1)")
   ("square" "(sqr $1)")
   ("plus" "(+ $1 $2)")
   ("minus" "(- $1 $2)")
   ("multiply" "(* $1 $2)")
   ("divide" "(/ $1 $2)")
   ("define type" "(define-type $1 $2)")
   ("cond" "(cond [$1])")
   ("let" "(let ([$1])\n    $2)")
   ("let-values" "(let-values ([$1])\n    $2)")
   ("let star" "(let* ([$1])\n    $2)")
   ("let star values" "(let-values* ([$1])\n    $2)")
   ("letrec" "(letrec ([$1])\n    $2)")
   ("define" "(define $1 $2)")
   ("string length" "(string-length $1)")
   ("lambda" "(lambda ([$1])\n    $2)")
   ("case-lambda" "(case-lambda [$1])")
   ("apply" "(apply $1 $2)")
   ("ann" "(ann $1 $2)")
   ("if" "(if $1 $2)")
   ("car" "(car $1)")
   ("cudder" "(cdr $1)")
   ("check null" "(null? $1)")
   ("check string" "(string? $1)")
   ("check integer" "(integer? $1)")
   ("check exact-integer" "(exact-integer? $1)")
   ("inst" "(inst $1 $2)")
   ("when" "(when ($1)\n    $2)")
   ("length" "(length $1)")
   ("assert" "(assert $1 $2)")
   ("add one" "(add1 $1)")
   ("all" "(All ($1) $2)")
   ("list" "(list $1)")
   ("string append" "(string-append $1)")
   ("vector ref" "(vector-ref $1 $2)")
   ("ormap" "(ormap $1 $2)")
   ("error" "(error $1)")
   ("require" "(require $1)")
   ("provide" "(provide $1)")
   ("typed require" "(require/typed) $1)")
   ("set!" "(set! $1 $2)")
   ))