(md-make-snippets
 '(derived-mode-p 'racket-mode 'racket-repl-mode)
 '(
   ("add one" "(add1 $1)")
   ("all" "(All ($1) $2)")
   ("and" "(and $1 $2)")
   ("andmap" "(and $1 $2)")
   ("ann" "(ann $1 $2)")
   ("apply" "(apply $1 $2)")
   ("arg" "$1 $2")
   ("assert" "(assert $1 $2)")
   ("assoc" "(assoc $1 $2)")
   ("begin for syntax" "(begin-for-syntax\n    $1)")
   ("begin zero" "(begin0\n    $1)")
   ("begin" "(begin\n    $1)")
   ("box" "(box $1)")
   ("car" "(car $1)")
   ("case" "case $1\n    [$2 $3]")
   ("case-lambda" "(case-lambda [$1])")
   ("check E Q" "(eq? $1 $2)")
   ("check boolean" "(boolean? $1)")
   ("check empty" "(empty? $1)")
   ("check equal" "(equal? $1 $2)")
   ("check exact-integer" "(exact-integer? $1)")
   ("check integer" "(integer? $1)")
   ("check list" "(list? $1)")
   ("check null" "(null? $1)")
   ("check pair" "(pair? $1)")
   ("check rational" "(rational? $1)")
   ("check real" "(real? $1)")
   ("check string" "(string? $1)")
   ("comment" ";; $1")
   ("conned" "(cond [$1])")
   ("cons" "(cons $1 $2)")
   ("contract out" "(contract-out [$1 $2])")
   ("could-er" "(cdr $1)")
   ("datum to syntax" "(datum->syntax $1 $2)")
   ("define syntax parameter" "(define-syntax-parameter $1\n    $2)")
   ("define syntax rule" "(define-syntax-rule ($1)\n    $2)")
   ("define syntax" "(define-syntax ($1 $2) $3)")
   ("define type" "(define-type $1 $2)")
   ("define" "(define $1 $2)")
   ("display line" "(displayln $1)")
   ("display" "(display $1)")
   ("divide" "(/ $1 $2)")
   ("dots" "(: $1 $2)")
   ("equal" "(= $1 $2)")
   ("error" "(error $1)")
   ("filter" "(filter $1 $2)")
   ("filter-not" "(filter-not $1 $2)")
   ("first" "(first $1)")
   ("second" "(second $1)")
   ("for" "(for ([$1 $2])\n    $3)")
   ("for and" "(for/and ([$1 $2])\n    $3)")
   ("for list" "(for/list ([$1 $2])\n    $3)")
   ("for fold" "(for/fold ([$1 $2])\n    $3)")
   ("for or" "(for/or ([$1 $2])\n    $3)")
   ("for syntax" "(for-syntax $1)")
   ("for vector" "(for/vector ([$1 $2])\n    $3)")
   ("format I D" "(format-id $1 $2 $3)")
   ("format" "(format $1 $2)")
   ("function type" "(-> $2)")
   ("greater equal" "(>= $1 $2)")
   ("greater" "(> $1 $2)")
   ("hash ref" "(hash-ref $1 $2)")
   ("hash ref" "(hash-ref! $1 $2 $3)")
   ("if" "(if $1 $2)")
   ("inst" "(inst $1 $2)")
   ("lambda" "(lambda ($1)\n    $2)")
   ("lang" "#lang $1")
   ("lang racket" "#lang racket")
   ("lang typed racket" "#lang typed/racket")
   ("length" "(length $1)")
   ("less equal" "(<= $1 $2)")
   ("lesser" "(< $1 $2)")
   ("let star values" "(let-values* ([$1 $2])\n    $2)")
   ("let star" "(let* ([$1 $2])\n    $2)")
   ("let" "(let ([$1 $2])\n    $2)")
   ("let-values" "(let-values ([$1 $2])\n    $2)")
   ("letrec" "(letrec ([$1 $2])\n    $2)")
   ("list of" "(Listof $1)")
   ("parameter of" "(Parameterof $1)")
   ("list" "(list $1)")
   ("main" "(module+ main\n    $1)")
   ("make bytes" "(make-bytes $1)")
   ("make hash" "(make-hash $1)")
   ("make parameter" "(make-parameter $1)")
   ("make rename transformer" "(make-rename-transformer #'$1)")
   ("make string" "(make-string $1)")
   ("map" "(map $1 $2)")
   ("match" "(match $1\n    [$2 $3])")
   ("mem F" "(memf $1 $2)")
   ("mem Q" "(memq $1 $2)")
   ("member" "(member $1 $2)")
   ("member" "[$1 : $2]")
   ("minus" "(- $1 $2)")
   ("module add" "(module+ $1\n    $1)")
   ("module star" "(module* $1 $2\n    $1)")
   ("module" "(module $1 $2\n    $1)")
   ("multiply" "(* $1 $2)")
   ("not" "(not $1)")
   ("or" "(or $1 $2)")
   ("ormap" "(ormap $1 $2)")
   ("parameterize" "(parameterize ([$1 $2])\n    $3)")
   ("plus" "(+ $1 $2)")
   ("print F" "(printf $1)")
   ("print line" "(println $1)")
   ("print" "(print $1)")
   ("provide" "(provide $1)")
   ("require" "(require $1)")
   ("rest" "(rest $1)")
   ("reverse" "(reverse $1)")
   ("set" "(set! $1 $2)")
   ("set of" "(Setof $1)")
   ("square root" "(sqrt $1)")
   ("square" "(sqr $1)")
   ("string append" "(string-append $1)")
   ("string length" "(string-length $1)")
   ("string ref" "(string-ref $1 $2)")
   ("struct copy" "(struct-copy $1 $2 [$3 $4])")
   ("struct" "(struct $1 ($2))")
   ("substring" "(substring $1 $2)")
   ("syntax case" "(syntax-case $1 ()\n    [($2) #'($3)])")
   ("syntax parse" "(syntax-parse $1\n    [($2) #'($3)])")
   ("syntax to datum" "(syntax->datum $1)")
   ("syntax to list" "(syntax->list $1)")
   ("syntax-parameterize" "(syntax-parameterize ([$1 $2])\n    $3)")
   ("test" "(module+ test\n    $1)")
   ("time" "(time $1)")
   ("to do" ";; TODO: $1")
   ("typed require" "(require/typed) $1)")
   ("unbox" "(unbox $1)")
   ("unless" "(unless $1\n    $2)")
   ("values" "(values $1)")
   ("vector ref" "(vector-ref $1 $2)")
   ("void" "(void $1)")
   ("when" "(when $1\n    $2)")
   ("with syntax star" "(with-syntax* ([$1 $2])\n    $2)")
   ("with syntax" "(with-syntax ([$1 $2])\n    $2)")
   ("with handlers" "(with-handlers ([$1 $2])\n    $2)")
   ("define macro" "(define-macro $1 $2)")
   ("module begin" "(#%module-begin $1)")
   ("rename out" "(rename-out [$1 $2])")
   ("syntax parameter value" "(syntax-parameter-value $1)")
   ("drop" "(drop $1 $2)")
   )
 )